### DESCRIPTION
# Docker compose to run complete infrastructure for Investment system.
# Configured services:
#   - PostgreSQL <- database for storing all system related data
#   - Flask <- API used to pull quotation form the Internet and perform calculations
#   - Checker <- service to check if there are new quotation available and trigger download mechanism
#   - DataImporter <- service to run on system start-up to insert initial configuration of:
#       - monitored funds
#       - investments
#   - Grafana <- data visualisation tool
#   - Loki <- database for systems' logs
#   - Promtail <- scraper for logs generated by system
#
# Persistent storage:
#  - APP_DATA <- system data to store DBs, current system status etc.
#  - APP_LOG <- shared volume to allow Promtail service to access system log files.
#
# Networks:
#  - LAN <- local network for internal communication between system components
#  - WAN <- external network to allow interaction with the system.
#       Ultimately, only Grafana will have access to the external network,
#        as the frontend of the system.

### INPUTS
# .env file

### CHANGE LOG
# Author:   Stanisław Horna
# GitHub Repository:  https://github.com/StanislawHornaGitHub/Investment
# Created:  23-Apr-2024
# Version:  1.5

# Date            Who                     What
# 2024-04-29      Stanisław Horna         Add checker service to compose.
#
# 2024-05-01      Stanisław Horna         Add health checks for components,
#                                         and orchestrate the order of starting-up particular components.
#
# 2024-05-02      Stanisław Horna         Add loki service to compose.
#
# 2024-05-04      Stanisław Horna         Separate persistant storage based on type, to Logs and Data.
#
# 2024-05-05      Stanisław Horna         Add timezone variable in .env file and assign it across services.
#

version: "3"

networks:
  Internal:
    name: LAN
    ipam:
      driver: default
      config:
        - subnet: "10.10.10.0/24"
          gateway: 10.10.10.1

  External:
    name: WAN
    external: true
    driver: bridge

services:
  Grafana:
    image: investment/grafana
    build:
      context: ./Grafana
      dockerfile: Grafana.Dockerfile
    container_name: ${GRAFANA_CONTAINER_NAME}
    hostname: ${GRAFANA_HOSTNAME}
    restart: no
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
      GF_DATE_FORMATS_DEFAULT_TIMEZONE: ${SYSTEM_TIME_ZONE}
    volumes:
      - ./Grafana/datasources:/etc/grafana/provisioning/datasources
      - ./Grafana/dashboards_provisioning:/etc/grafana/provisioning/dashboards
      - ./Grafana/dashboards:/var/lib/grafana/dashboards
      - ${APP_DATA_PATH}/${GRAFANA_PERSISTENT_STORAGE_DIR}:/var/lib/grafana
      - ${APP_LOG_PATH}/${GRAFANA_PERSISTENT_STORAGE_DIR}:/var/log/grafana
    ports:
      - ${GRAFANA_EXTERNAL_PORT}:3000
    networks:
      Internal:
        ipv4_address: ${GRAFANA_INTERNAL_IP}
      External: null
    healthcheck:
      test: curl --fail http://${GRAFANA_HOSTNAME}:3000/api/health
      start_period: 2s
      interval: 3s
      timeout: 1s
      retries: 5

  Flask:
    image: investment/flask
    build:
      context: ./Flask
      dockerfile: Flask.Dockerfile
    depends_on:
      PostgreSQL:
        condition: service_healthy
    container_name: ${FLASK_CONTAINER_NAME}
    hostname: ${FLASK_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
      DB_IP_Address: ${POSTGRESQL_INTERNAL_IP}
      DB_Username_rw: ${FLASK_DB_USERNAME_rw}
      DB_Password_rw: ${FLASK_DB_PASSWORD_rw}
      DB_Username_ro: ${FLASK_DB_USERNAME}
      DB_Password_ro: ${FLASK_DB_PASSWORD}
    restart: unless-stopped
    volumes:
      - ${APP_LOG_PATH}/${FLASK_PERSISTENT_STORAGE_DIR}:/log
    ports:
      - ${FLASK_EXTERNAL_PORT}:5000
    networks:
      Internal:
        ipv4_address: ${FLASK_INTERNAL_IP}
      External: null
    healthcheck:
      test: curl --fail http://${FLASK_HOSTNAME}:5000/health
      start_period: 2s
      interval: 2s
      timeout: 1s
      retries: 10

  PostgreSQL:
    image: investment/postgresql
    build:
      context: ./PostgreSQL
      dockerfile: PostgreSQL.Dockerfile
    container_name: ${POSTGRESQL_CONTAINER_NAME}
    hostname: ${POSTGRESQL_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
    restart: no
    volumes:
      - ${APP_DATA_PATH}/${POSTGRESQL_PERSISTENT_STORAGE_DIR}:/var/lib/postgresql/data
    ports:
      - ${POSTGRESQL_EXTERNAL_PORT}:5432
    networks:
      Internal:
        ipv4_address: ${POSTGRESQL_INTERNAL_IP}
      External: null
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U Investments"]
      start_period: 2s
      interval: 2s
      timeout: 5s
      retries: 10

  Checker:
    image: investment/checker
    build:
      context: ./Checker
      dockerfile: Checker.Dockerfile
    depends_on:
      PostgreSQL:
        condition: service_healthy
      Flask:
        condition: service_healthy
      DataImporter:
        condition: service_completed_successfully
    container_name: ${CHECKER_CONTAINER_NAME}
    hostname: ${CHECKER_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
    restart: unless-stopped
    volumes:
      - ${APP_LOG_PATH}/${CHECKER_PERSISTENT_STORAGE_DIR}:/log
    networks:
      Internal:
        ipv4_address: ${CHECKER_INTERNAL_IP}

  DataImporter:
    image: investment/dataimporter
    build:
      context: ./DataImporter
      dockerfile: DataImporter.Dockerfile
    depends_on:
      PostgreSQL:
        condition: service_healthy
      Flask:
        condition: service_healthy
    container_name: ${DATA_IMPORTER_CONTAINER_NAME}
    hostname: ${DATA_IMPORTER_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
    restart: no
    volumes:
      - ${APP_LOG_PATH}/${DATA_IMPORTER_PERSISTENT_STORAGE_DIR}:/log
    networks:
      Internal: null

  Loki:
    image: investment/loki
    build:
      context: ./Loki
      dockerfile: Loki.Dockerfile
    container_name: ${LOKI_CONTAINER_NAME}
    hostname: ${LOKI_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
    volumes:
      - ./Loki:/etc/loki
      - ${APP_DATA_PATH}/${LOKI_PERSISTENT_STORAGE_DIR}:/loki
    ports:
      - "${LOKI_EXTERNAL_PORT}:3100"
    networks:
      Internal:
        ipv4_address: ${LOKI_INTERNAL_IP}
      External: null
    healthcheck:
      test: curl -s http://localhost:3100/ready | grep -q -w ready
      start_period: 2s
      interval: 2s
      timeout: 1s
      retries: 10

  Promtail:
    image: investment/promtail
    build:
      context: ./Promtail
      dockerfile: Promtail.Dockerfile
    depends_on:
      Loki:
        condition: service_healthy
    container_name: ${PROMTAIL_CONTAINER_NAME}
    hostname: ${PROMTAIL_HOSTNAME}
    environment:
      TZ: ${SYSTEM_TIME_ZONE}
    volumes:
      - ./Promtail:/etc/promtail
      - ./${APP_DATA_PATH}/${PROMTAIL_PERSISTENT_STORAGE_DIR}:/var/lib/promtail
      - ./${APP_LOG_PATH}:/APP_LOG
      - ./${APP_DATA_PATH}:/APP_DATA
    ports:
      - ${PROMTAIL_EXTERNAL_PORT}:9080
    networks:
      Internal:
        ipv4_address: "${PROMTAIL_INTERNAL_IP}"
      External: null
    healthcheck:
      test: curl --fail http://${PROMTAIL_HOSTNAME}:9080
      start_period: 2s
      interval: 2s
      timeout: 5s
      retries: 10
